/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.AdministrativeRole;

import Business.Administrative;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Patient.Patient;
import Business.Person.Person;
import Business.WorkQueue.HospitalEnterpriseAdminWorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rekhajindal
 */
public class ManagePatientsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private EcoSystem system;
    private Administrative admin;
    private Organization org;
    
    /**
     * Creates new form ManagePatientsJPanel
     */
    public ManagePatientsJPanel(JPanel upc, Enterprise enterprise,Administrative admin,Organization org) {
        initComponents();
        this.userProcessContainer=upc;
        this.enterprise=enterprise;
        this.admin=admin;
        this.org=org;
        populatePateintTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PatientDetailsJTable = new javax.swing.JTable();
        btnRegisterPatient = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnpatientDetails = new javax.swing.JButton();
        btnFixAppointment = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Patient Details of an Enterprise");

        PatientDetailsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "PersonID", "Patient MRN", "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(PatientDetailsJTable);

        btnRegisterPatient.setText("Register Patient");
        btnRegisterPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterPatientActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnpatientDetails.setText("View Patient Details");
        btnpatientDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpatientDetailsActionPerformed(evt);
            }
        });

        btnFixAppointment.setText("Assign to Preferred Doctor");
        btnFixAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFixAppointmentActionPerformed(evt);
            }
        });

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(btnRegisterPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnFixAppointment)
                .addGap(18, 18, 18)
                .addComponent(btnpatientDetails)
                .addGap(56, 56, 56))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(btnBack)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1)
                .addGap(8, 8, 8)
                .addComponent(btnRefresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegisterPatient)
                    .addComponent(btnpatientDetails)
                    .addComponent(btnFixAppointment))
                .addGap(172, 172, 172)
                .addComponent(btnBack)
                .addGap(65, 65, 65))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegisterPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterPatientActionPerformed
        // TODO add your handling code here:
        RegisterPatientJPanel panel=new RegisterPatientJPanel(userProcessContainer, enterprise, admin,org);
        userProcessContainer.add("RegisterJPanel",panel);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnRegisterPatientActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        populatePateintTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnpatientDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnpatientDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRow=PatientDetailsJTable.getSelectedRow();
        if(selectedRow < 0)
        {
            JOptionPane.showMessageDialog(null,"Please select atleast one row");
            return;
        }
        Patient patient=(Patient)PatientDetailsJTable.getValueAt(selectedRow, 0);
        ViewPatientDetailsJPanel panel=new ViewPatientDetailsJPanel(userProcessContainer,patient);
        userProcessContainer.add("ViewPatientJPanel",panel);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnpatientDetailsActionPerformed

    private void btnFixAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFixAppointmentActionPerformed
        // TODO add your handling code here:
        int selectedRow=PatientDetailsJTable.getSelectedRow();
        if(selectedRow < 0)
        {
            JOptionPane.showMessageDialog(null,"Please select atleast one row");
            return;
        }
        Patient patient=(Patient)PatientDetailsJTable.getValueAt(selectedRow, 0);
        patient.setPrefferedDoctorEnterprise(enterprise);
        if(!patient.isAssign())
        {
            patient.setAssign(true);
            HospitalEnterpriseAdminWorkRequest request=new HospitalEnterpriseAdminWorkRequest();
            String message=patient.getPreffredDoctor().getFirstName() +"is assigned to" + patient.getFirstName();
            String sender=enterprise.getName()+" from" +enterprise.getEnterpriseType();
            request.setMessage(message);
            request.setEnterpriseSender(enterprise);
            request.setDoctor(patient.getPreffredDoctor());
            request.setPatient(patient);
            request.setStatus("Assigned");
            patient.getPreffredDoctor().getWorkQueue().getWorkRequestList().add(request);
            patient.getWorkQueue().getWorkRequestList().add(request);
        }
        else
        {
            JOptionPane.showMessageDialog(null,"This Patient is already assigned");
        }
        
        
    }//GEN-LAST:event_btnFixAppointmentActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    public void populatePateintTable()
    {
        DefaultTableModel model= (DefaultTableModel)PatientDetailsJTable.getModel();
        model.setRowCount(0);
        for(Person person:org.getPerosnDirectory().getPersonList())
        {
            Patient patient=(Patient)person;
            Object[]row=new Object[3];
            row[0]=patient;
            row[1]=patient.getPatientMRN();
            row[2]=patient.getFirstName();
            model.addRow(row);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable PatientDetailsJTable;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnFixAppointment;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRegisterPatient;
    private javax.swing.JButton btnpatientDetails;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
