/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.PharmaceuticalCompanyRole;

import Business.Doctor.Doctor;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.PharmacyEnterprise;
import Business.Network.Network;
import Business.Network.NetworkCity;
import Business.Network.NetworkState;
import Business.Patient.Patient;
import Business.Person.Person;
import Business.WorkQueue.PharmaCompanyCommunicationWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rekhajindal
 */
public class NetworkCommunicationJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private EcoSystem system;
    /**
     * Creates new form NetworkCommunicationJPanel
     */
    public NetworkCommunicationJPanel(JPanel upc,Enterprise enterprise,EcoSystem system) {
        initComponents();
        this.userProcessContainer=upc;
        this.enterprise=enterprise;
        this.system=system;
        populateMessageTable();
    }

    public void populateMessageTable()
    {
        DefaultTableModel model=(DefaultTableModel)MessageDetailsJTable.getModel();
        model.setRowCount(0);
        for(WorkRequest request:enterprise.getWorkQueue().getWorkRequestList())
        {
            if(request instanceof PharmaCompanyCommunicationWorkRequest)
            {
                PharmaCompanyCommunicationWorkRequest phComRequest=(PharmaCompanyCommunicationWorkRequest)request;
                Object[]row=new Object[2];
                row[0]=phComRequest;
                row[1]=phComRequest.getRequestDate();
                model.addRow(row);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtmsgArea = new javax.swing.JTextArea();
        btnSend = new javax.swing.JButton();
        btnback = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        MessageDetailsJTable = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        checkPharmacy = new javax.swing.JCheckBox();
        chckDoctors = new javax.swing.JCheckBox();
        chckPatients = new javax.swing.JCheckBox();

        jLabel1.setText("Message");

        txtmsgArea.setColumns(20);
        txtmsgArea.setRows(5);
        jScrollPane1.setViewportView(txtmsgArea);

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        btnback.setText("<< Back");
        btnback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbackActionPerformed(evt);
            }
        });

        MessageDetailsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Message", "Date"
            }
        ));
        jScrollPane2.setViewportView(MessageDetailsJTable);

        jLabel2.setText("List of Work Request");

        checkPharmacy.setText("Pharmacies");

        chckDoctors.setText("Doctors");

        chckPatients.setText("Patients");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jLabel1)
                        .addGap(41, 41, 41)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(btnback))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(247, 247, 247)
                        .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(checkPharmacy)
                        .addGap(77, 77, 77)
                        .addComponent(chckDoctors)
                        .addGap(89, 89, 89)
                        .addComponent(chckPatients)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel2)
                .addGap(53, 53, 53)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chckDoctors)
                    .addComponent(chckPatients)
                    .addComponent(checkPharmacy))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(btnSend))
                    .addComponent(jLabel1))
                .addGap(74, 74, 74)
                .addComponent(btnback)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        // TODO add your handling code here:
        String checkboxChecked=null;
        String message =txtmsgArea.getText();
        if(message.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "please enter message");
            return;
        }
        
        if(!(chckDoctors.isSelected()) && !(checkPharmacy.isSelected()) && !(chckPatients.isSelected()))
        {
            JOptionPane.showMessageDialog(null, "please select atleast one option to send message");
            return;
        }
        PharmaCompanyCommunicationWorkRequest commRequest=new PharmaCompanyCommunicationWorkRequest();
        commRequest.setMessage(message);
        commRequest.setRequestDate(new Date());
        commRequest.setSenderEnterprise(enterprise.getName());
        enterprise.getWorkQueue().getWorkRequestList().add(commRequest);
            
            for (Network network : system.getNetworkList()) 
             {
                for (NetworkState state : network.getNetworkStateList()) 
                    {
                      for (NetworkCity city : state.getNetworkCityList()) 
                        {
                            for(Enterprise enterprise:city.getEnterpriseDirectory().getEnterpriseList())
                            {
                                if(enterprise instanceof PharmacyEnterprise)
                                {
                                    if(checkPharmacy.isSelected())
                                    {
                                        enterprise.getWorkQueue().getWorkRequestList().add(commRequest);
                                    }
                                }
                            }
                            
                        }
                        }
             }
        
        for(Person person:system.getAdministrative().getPerosnDirectory().getPersonList())
        {
            if(person instanceof Doctor)
            {
                if(chckDoctors.isSelected())
                {
                    Doctor doctor=(Doctor)person;
                    doctor.getWorkQueue().getWorkRequestList().add(commRequest);
                }
            }
            
            if(person instanceof Patient)
            {
                if(chckPatients.isSelected())
                {
                    Patient patient=(Patient)person;
                    patient.getWorkQueue().getWorkRequestList().add(commRequest);
                }
            }
        }
        
        populateMessageTable();
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnbackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable MessageDetailsJTable;
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnback;
    private javax.swing.JCheckBox chckDoctors;
    private javax.swing.JCheckBox chckPatients;
    private javax.swing.JCheckBox checkPharmacy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea txtmsgArea;
    // End of variables declaration//GEN-END:variables
}
