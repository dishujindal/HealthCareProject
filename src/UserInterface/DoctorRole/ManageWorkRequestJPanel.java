/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DoctorRole;

import Business.Doctor.Doctor;
import Business.Encounter.Encounter;
import Business.Enterprise.ClinicEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Network.Network;
import Business.Network.NetworkCity;
import Business.Network.NetworkState;
import Business.Patient.Patient;
import Business.WorkQueue.HospitalEnterpriseAdminWorkRequest;
import Business.WorkQueue.PatientWorkRequest;
import Business.WorkQueue.ReferToOtherDoctorWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rekhajindal
 */
public class ManageWorkRequestJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private Doctor doctor;
    private PatientWorkRequest pwrequest;
    private ArrayList<Network> networkList;
    private ArrayList<Encounter> encounterList;
    private Enterprise currentEnterprise;
    private Patient patient;
    private ArrayList<Encounter> storeEncounterList;

    /**
     * Creates new form ManageWorkRequestJPanel
     */
    public ManageWorkRequestJPanel(JPanel upc, Enterprise enterprise, Doctor doctor, ArrayList<Network> networkList) {
        initComponents();
        this.userProcessContainer = upc;
        this.enterprise = enterprise;
        this.doctor = doctor;
        this.networkList = networkList;
        this.encounterList = new ArrayList<>();
        hideControls();
        populateEnterpriseTable();
        
    }

    public void hideControls() {
        labelMessagePatient.setVisible(false);
        txtMessagetoPatient.setVisible(false);
        btnSentMessage.setVisible(false);
    }

    public void populateEnterpriseTable() {
        DefaultTableModel model = (DefaultTableModel) EnterpriseDetailsJTable.getModel();
        model.setRowCount(0);
        for (Enterprise enterprise : doctor.getEnterpriseList()) {
            if (enterprise instanceof HospitalEnterprise || enterprise instanceof ClinicEnterprise) {
                Object[] row = new Object[2];
                row[0] = enterprise;
                row[1] = enterprise.getOrganizationID();
                model.addRow(row);
            }
        }
    }

    public void getEncounterHistory(Patient patient) {

        encounterList = new ArrayList<>();

        if (currentEnterprise instanceof HospitalEnterprise) {
            HospitalEnterprise hospEnterprise = (HospitalEnterprise) currentEnterprise;
            for (Encounter encounter : hospEnterprise.getEncounterList()) {
                if (encounter.getDoctor() == doctor && encounter.getPatient() == patient) {
                    encounterList.add(encounter);
                }
            }
        }

        if (currentEnterprise instanceof ClinicEnterprise) {
            ClinicEnterprise clinicEnterprise = (ClinicEnterprise) currentEnterprise;
            for (Encounter encounter : clinicEnterprise.getEncounterList()) {
                if (encounter.getDoctor() == doctor && encounter.getPatient() == patient) {
                    encounterList.add(encounter);
                }
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        DoctorWorkRequestJTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        EnterpriseDetailsJTable = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        btnViewWorkRequest = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnAddEncounter = new javax.swing.JButton();
        btnacknowledgement = new javax.swing.JButton();
        labelMessagePatient = new javax.swing.JLabel();
        txtMessagetoPatient = new javax.swing.JTextField();
        btnSentMessage = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnReferDoctor = new javax.swing.JButton();
        btnviewEncounterHistory = new javax.swing.JButton();
        btnClosecase = new javax.swing.JButton();

        DoctorWorkRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Patient MRN", "Patient Name", "Request Status"
            }
        ));
        jScrollPane1.setViewportView(DoctorWorkRequestJTable);

        jLabel2.setText("Select Enterprise");

        EnterpriseDetailsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Enterprise Name", "Enterprise ID"
            }
        ));
        jScrollPane2.setViewportView(EnterpriseDetailsJTable);

        btnViewWorkRequest.setText("View Enterprise Work Request");
        btnViewWorkRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewWorkRequestActionPerformed(evt);
            }
        });

        jLabel3.setText("List of Work Request");

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnAddEncounter.setText("Add Encounter");
        btnAddEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEncounterActionPerformed(evt);
            }
        });

        btnacknowledgement.setText("Send Acknowledgement");
        btnacknowledgement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnacknowledgementActionPerformed(evt);
            }
        });

        labelMessagePatient.setText("Message to Patient");

        btnSentMessage.setText("Send Message ");
        btnSentMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSentMessageActionPerformed(evt);
            }
        });

        jLabel1.setText("List of Enterprise");

        btnReferDoctor.setText("Refer to Other Doctor");
        btnReferDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReferDoctorActionPerformed(evt);
            }
        });

        btnviewEncounterHistory.setText("View Encounter history");
        btnviewEncounterHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnviewEncounterHistoryActionPerformed(evt);
            }
        });

        btnClosecase.setText("Close Case");
        btnClosecase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClosecaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(btnviewEncounterHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(btnClosecase))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(btnViewWorkRequest))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(269, 269, 269)
                        .addComponent(btnSentMessage))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnBack)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(btnAddEncounter)
                                        .addGap(34, 34, 34)
                                        .addComponent(btnReferDoctor)))
                                .addGap(45, 45, 45)
                                .addComponent(btnacknowledgement))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelMessagePatient)
                                .addGap(51, 51, 51)
                                .addComponent(txtMessagetoPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(69, 69, 69))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnViewWorkRequest)
                .addGap(47, 47, 47)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddEncounter)
                    .addComponent(btnacknowledgement)
                    .addComponent(btnReferDoctor))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnviewEncounterHistory)
                    .addComponent(btnClosecase))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMessagetoPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelMessagePatient))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSentMessage)
                    .addComponent(btnBack))
                .addGap(33, 33, 33))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnacknowledgementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnacknowledgementActionPerformed
        // TODO add your handling code here:
        int selectedRow = DoctorWorkRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "please select atleast one row");
            return;
        }
        WorkRequest request = (WorkRequest) DoctorWorkRequestJTable.getValueAt(selectedRow, 0);
        if (request instanceof HospitalEnterpriseAdminWorkRequest) {
            JOptionPane.showMessageDialog(null, "Already Acknowledged to patient. No need of further details ");
            return;
        }
        if (request instanceof ReferToOtherDoctorWorkRequest) {
            JOptionPane.showMessageDialog(null, "sorry u can't acknowledeg this");
            return;
        }
        if (request instanceof PatientWorkRequest) {
            labelMessagePatient.setVisible(true);
            txtMessagetoPatient.setVisible(true);
            btnSentMessage.setVisible(true);
            pwrequest = (PatientWorkRequest) request;
        }
    }//GEN-LAST:event_btnacknowledgementActionPerformed

    private void btnSentMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSentMessageActionPerformed
        // TODO add your handling code here:
        String patientMessage = txtMessagetoPatient.getText();
        pwrequest.setAppointmentMessage(patientMessage);
        pwrequest.setStatus("processed");
    }//GEN-LAST:event_btnSentMessageActionPerformed

    private void btnAddEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEncounterActionPerformed
        // TODO add your handling code here:
        int selectedRow = DoctorWorkRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "please select atleast one row");
        }
        WorkRequest request = (WorkRequest) DoctorWorkRequestJTable.getValueAt(selectedRow, 0);
        if (request instanceof PatientWorkRequest) {
            PatientWorkRequest pwrequest = (PatientWorkRequest) request;
            Patient patient=pwrequest.getPatient();
            if(patient.getPreffredDoctor()!=doctor && patient.getTemporaryDoctor()==null)
            {
                JOptionPane.showMessageDialog(null, "You are not allowed to add encounter for this patient now");
                return;
            }
            AddEncounterJPanel panel = new AddEncounterJPanel(userProcessContainer, doctor, pwrequest.getPatient(), pwrequest.getReceiverEnterprise(), networkList);
            userProcessContainer.add("AddEncounterPanel", panel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
            
        }
        if (request instanceof HospitalEnterpriseAdminWorkRequest) {
            HospitalEnterpriseAdminWorkRequest adminRequest = (HospitalEnterpriseAdminWorkRequest) request;
            AddEncounterJPanel panel = new AddEncounterJPanel(userProcessContainer, doctor, adminRequest.getPatient(), adminRequest.getEnterpriseSender(), networkList);
            userProcessContainer.add("AddEncounterPanel", panel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
            
        }

        if (request instanceof ReferToOtherDoctorWorkRequest) {
            ReferToOtherDoctorWorkRequest referRequest = (ReferToOtherDoctorWorkRequest) request;
            patient=referRequest.getPatient();
//            if(referRequest.getStatus().equals("case completed"))
//            {
//                JOptionPane.showMessageDialog(null, "You are not allowed to register encounter now");
//                return;
//            }
            if(patient.getTemporaryDoctor()==null)
            {
                JOptionPane.showMessageDialog(null, "You are not allowed to register encounter now");
                return;
            }
            AddEncounterJPanel panel = new AddEncounterJPanel(userProcessContainer, doctor, referRequest.getPatient(), referRequest.getReceiverEnterprise(), networkList);
            userProcessContainer.add("AddEncounterPanel", panel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
            
        }
    }//GEN-LAST:event_btnAddEncounterActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewWorkRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewWorkRequestActionPerformed
        // TODO add your handling code here:
        int selectedRow = EnterpriseDetailsJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "please select atleast one row");
            return;
        }
        Enterprise enterprise = (Enterprise) EnterpriseDetailsJTable.getValueAt(selectedRow, 0);
        currentEnterprise = enterprise;
        populateWorkRequestTable(enterprise);
    }//GEN-LAST:event_btnViewWorkRequestActionPerformed

    private void btnviewEncounterHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnviewEncounterHistoryActionPerformed
        // TODO add your handling code here:
        int selectedRow = DoctorWorkRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "please select atleast one row");
            return;
        }
        WorkRequest request = (WorkRequest) DoctorWorkRequestJTable.getValueAt(selectedRow, 0);
        if (request instanceof HospitalEnterpriseAdminWorkRequest) {
            HospitalEnterpriseAdminWorkRequest adminRequest = (HospitalEnterpriseAdminWorkRequest) request;
            patient = adminRequest.getPatient();
            getEncounterHistory(patient);
        }
        if (request instanceof PatientWorkRequest) {
            PatientWorkRequest patientRequest = (PatientWorkRequest) request;
            patient = patientRequest.getPatient();
            getEncounterHistory(patient);
        }
        if (request instanceof ReferToOtherDoctorWorkRequest) {
            storeEncounterList = new ArrayList<>();
            ReferToOtherDoctorWorkRequest referRequest = (ReferToOtherDoctorWorkRequest) request;
            storeEncounterList = referRequest.getEncounterList();
            //storeEncounterList = encounterList;
            patient = referRequest.getPatient();
            getEncounterHistory(patient);
            for (Encounter encounter : storeEncounterList) {
                encounterList.add(encounter);
            }
        }

        ViewEncounterHistoryJPanel panel = new ViewEncounterHistoryJPanel(userProcessContainer, encounterList);
        userProcessContainer.add("viewEncounterPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnviewEncounterHistoryActionPerformed

    private void btnReferDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReferDoctorActionPerformed
        // TODO add your handling code here:
        int selectedRow = DoctorWorkRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "please select atleast one row");
            return;
        }
        WorkRequest request = (WorkRequest) DoctorWorkRequestJTable.getValueAt(selectedRow, 0);
        if (request instanceof HospitalEnterpriseAdminWorkRequest) {

           // need to appy check in this case not allowed for further refer
            JOptionPane.showMessageDialog(null, "You can not refer to this patient");
            return;

        }
        if (request instanceof PatientWorkRequest) {
            PatientWorkRequest patientRequest = (PatientWorkRequest) request;
            patient = patientRequest.getPatient();
            if (patient.getPreffredDoctor() != doctor) {
                JOptionPane.showMessageDialog(null, "This patient can not be assigned");
                return;
            }
            if (patient.getTemporaryDoctor() != null) {
                JOptionPane.showMessageDialog(null, "this patient is already assigned");
                return;
            }
            getEncounterHistory(patient);
        }
        if (request instanceof ReferToOtherDoctorWorkRequest) {
            JOptionPane.showMessageDialog(null, "You are not allowed");
            return;
        }

        ReferOtherDoctorJPanel panel = new ReferOtherDoctorJPanel(userProcessContainer, doctor, patient, encounterList, networkList, currentEnterprise);
        userProcessContainer.add("RefertoOtherDoctorPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnReferDoctorActionPerformed

    private void btnClosecaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClosecaseActionPerformed
        // TODO add your handling code here:
        
        String status="";
        int selectedRow = DoctorWorkRequestJTable.getSelectedRow();
        if (selectedRow < 0) 
        {
            JOptionPane.showMessageDialog(null, "please select atleast one row");
            return;
        }
        
        
        int selectedValue=JOptionPane.showConfirmDialog(null, "Are you sure u want to delete", "Warning",JOptionPane.YES_NO_OPTION);
        if(selectedValue==JOptionPane.YES_OPTION)
        {
            WorkRequest request = (WorkRequest) DoctorWorkRequestJTable.getValueAt(selectedRow, 0);
            if (request instanceof HospitalEnterpriseAdminWorkRequest)
            {
                HospitalEnterpriseAdminWorkRequest adminRequest = (HospitalEnterpriseAdminWorkRequest) request;
                JOptionPane.showMessageDialog(null, "You can not do it for this request");
                return;
            }

            if (request instanceof PatientWorkRequest) 
            {
                PatientWorkRequest patientRequest = (PatientWorkRequest) request;
                patient=patientRequest.getPatient();
                
                
            }

            if (request instanceof ReferToOtherDoctorWorkRequest)
            {
                ReferToOtherDoctorWorkRequest referrequest=(ReferToOtherDoctorWorkRequest)request;
                patient=referrequest.getPatient();
                referrequest.setStatus("case completed");
                //status=referrequest.getStatus();
            }
            patient.setTemporaryDoctor(null);
            patient.setSecondaryDoctorEnterprise(null);
        }

    }//GEN-LAST:event_btnClosecaseActionPerformed

    public void populateWorkRequestTable(Enterprise enterprise) {
        DefaultTableModel model = (DefaultTableModel) DoctorWorkRequestJTable.getModel();
        model.setRowCount(0);
        for (WorkRequest request : doctor.getWorkQueue().getWorkRequestList()) {
            if (request instanceof HospitalEnterpriseAdminWorkRequest) {
                HospitalEnterpriseAdminWorkRequest Adminrequest = (HospitalEnterpriseAdminWorkRequest) request;
                if (Adminrequest.getEnterpriseSender() == enterprise) {
                    Object[] row = new Object[4];
                    row[0] = Adminrequest;
                    row[1] = Adminrequest.getPatient().getPatientMRN();
                    row[2] = Adminrequest.getPatient().getFirstName();
                    row[3] = Adminrequest.getStatus();
                    model.addRow(row);
                }
            }

            if (request instanceof PatientWorkRequest) {
                PatientWorkRequest patientRequest = (PatientWorkRequest) request;
                if (patientRequest.getReceiverEnterprise() == enterprise) {
                    Object[] row = new Object[4];
                    row[0] = patientRequest;
                    row[1] = patientRequest.getPatient().getPatientMRN();
                    row[2] = patientRequest.getPatient().getFirstName();
                    row[3] = patientRequest.getStatus();
                    model.addRow(row);
                }
            }

            if (request instanceof ReferToOtherDoctorWorkRequest) {
                ReferToOtherDoctorWorkRequest referRequest = (ReferToOtherDoctorWorkRequest) request;
                if (referRequest.getReceiverEnterprise() == currentEnterprise) {

                    //need to check above condition it should be receiver enterprise???
                    if (referRequest.getReceiver() == doctor) {
                        Object[] row = new Object[4];
                        row[0] = referRequest;
                        row[1] = referRequest.getPatient().getPatientMRN();
                        row[2] = referRequest.getPatient().getFirstName();
                        row[3] = referRequest.getStatus();
                        model.addRow(row);
                    }
                }
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DoctorWorkRequestJTable;
    private javax.swing.JTable EnterpriseDetailsJTable;
    private javax.swing.JButton btnAddEncounter;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClosecase;
    private javax.swing.JButton btnReferDoctor;
    private javax.swing.JButton btnSentMessage;
    private javax.swing.JButton btnViewWorkRequest;
    private javax.swing.JButton btnacknowledgement;
    private javax.swing.JButton btnviewEncounterHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelMessagePatient;
    private javax.swing.JTextField txtMessagetoPatient;
    // End of variables declaration//GEN-END:variables
}
