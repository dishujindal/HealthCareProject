/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.DoctorRole;

import Business.Doctor.Doctor;
import Business.Encounter.Encounter;
import Business.Enterprise.ClinicEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Network.Network;
import Business.Network.NetworkCity;
import Business.Network.NetworkState;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.Person.Person;
import Business.WorkQueue.ReferToOtherDoctorWorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rekhajindal
 */
public class ReferOtherDoctorJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Patient patient;
    private ArrayList<Encounter>encounterList;
    private ArrayList<Network>networkList;
    private Doctor senderDoctor;
    private Enterprise receiverEnterprise;
    private Enterprise senderEnterprise;
    /**
     * Creates new form ReferOtherDoctorJPanel
     */
    public ReferOtherDoctorJPanel(JPanel upc,Doctor doctor,Patient patient,ArrayList<Encounter>encounterList,ArrayList<Network>networkList,Enterprise enterprise)
    {
        initComponents();
        this.userProcessContainer=upc;
        this.patient=patient;
        this.encounterList=encounterList;
        this.networkList=networkList;
        this.senderDoctor=doctor;
        this.senderEnterprise=enterprise;
        populateCountryCombo();
    }

    
     public void populateCountryCombo()
    {
        comboCountry.removeAllItems();
        for(Network country:networkList)
        {
            comboCountry.addItem(country);
        }
        
    }
    public void populateStateCombo(Network country)
    {
        comboState.removeAllItems();
        for(NetworkState state: country.getNetworkStateList())
        {
            comboState.addItem(state);
        }
    }
    
    public void populateCityCombo(NetworkState state)
    {
        comboCity.removeAllItems();
        for(NetworkCity city:state.getNetworkCityList())
        {
            comboCity.addItem(city);
        }
    }
    
    public void populateEnterpriseCombo(NetworkCity city)
    {
        comboEnterprise.removeAllItems();
        for(Enterprise enterprise:city.getEnterpriseDirectory().getEnterpriseList())
        {
            if(enterprise instanceof HospitalEnterprise || enterprise instanceof ClinicEnterprise)
            {
                comboEnterprise.addItem(enterprise);
            }
            
        }
    }
    
    public void populateDoctorsTable(Enterprise enterprise)
    {
        DefaultTableModel model=(DefaultTableModel)DoctorsDetailsJtable.getModel();
        model.setRowCount(0);
        if(enterprise instanceof HospitalEnterprise || enterprise instanceof ClinicEnterprise)
        {
            for(Organization org:enterprise.getOrganizationDirectory().getOrganizationList())
            {
                if(org instanceof DoctorOrganization)
                {
                    for(Person person:org.getPerosnDirectory().getPersonList())
                    {
                        
                        Doctor doctor=(Doctor)person;
                        if(doctor != senderDoctor)
                        {
                        Object[]row=new Object[4];
                        row[0]=doctor;
                        row[1]=doctor.getFirstName();
                        row[2]=doctor.getSpecialization();
                        row[3]=doctor.getLicenseID();
                        model.addRow(row);
                        }

                    }
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboState = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        comboCity = new javax.swing.JComboBox();
        comboCountry = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        comboEnterprise = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        DoctorsDetailsJtable = new javax.swing.JTable();
        btnSendRequest = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtMessage = new javax.swing.JTextField();
        btnback = new javax.swing.JButton();

        comboState.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboStateActionPerformed(evt);
            }
        });

        jLabel13.setText("Select City");

        jLabel10.setText("Select Country");

        comboCity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCityActionPerformed(evt);
            }
        });

        comboCountry.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCountryActionPerformed(evt);
            }
        });

        jLabel12.setText("Select State");

        jLabel1.setText("Select Enterprise");

        comboEnterprise.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboEnterprise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboEnterpriseActionPerformed(evt);
            }
        });

        jLabel2.setText("List of Doctors");

        DoctorsDetailsJtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Person ID", "Doctor Name", "Specialization", "License Number"
            }
        ));
        jScrollPane1.setViewportView(DoctorsDetailsJtable);

        btnSendRequest.setText("Send Request ");
        btnSendRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendRequestActionPerformed(evt);
            }
        });

        jLabel3.setText("Message");

        btnback.setText("<< Back");
        btnback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel13))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboCity, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(119, 119, 119)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel12))
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboState, 0, 92, Short.MAX_VALUE)
                                    .addComponent(comboEnterprise, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnback)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(jLabel3)
                        .addGap(42, 42, 42)
                        .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(231, 231, 231)
                        .addComponent(btnSendRequest)))
                .addGap(62, 62, 62))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(comboCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(comboState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(comboCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(comboEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(btnSendRequest)
                .addGap(18, 18, 18)
                .addComponent(btnback)
                .addContainerGap(20, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboStateActionPerformed
        // TODO add your handling code here:
        NetworkState state=(NetworkState)comboState.getSelectedItem();
        if(state != null)
        {
            populateCityCombo(state);
        }
    }//GEN-LAST:event_comboStateActionPerformed

    private void comboCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCityActionPerformed
        // TODO add your handling code here:
        NetworkCity city=(NetworkCity)comboCity.getSelectedItem();
        if(city != null)
        {
            populateEnterpriseCombo(city);
        }
    }//GEN-LAST:event_comboCityActionPerformed

    private void comboCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCountryActionPerformed
        // TODO add your handling code here:
        Network country=(Network)comboCountry.getSelectedItem();
        if(country != null)
        {
            populateStateCombo(country);
        }
    }//GEN-LAST:event_comboCountryActionPerformed

    private void comboEnterpriseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboEnterpriseActionPerformed
        // TODO add your handling code here:
        Enterprise enterprise=(Enterprise)comboEnterprise.getSelectedItem();
        receiverEnterprise=enterprise;
        if(enterprise != null)
        {
            populateDoctorsTable(enterprise);
        }
    }//GEN-LAST:event_comboEnterpriseActionPerformed

    private void btnSendRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendRequestActionPerformed
        // TODO add your handling code here:
        int selectedRow=DoctorsDetailsJtable.getSelectedRow();
        if(selectedRow < 0)
        {
            JOptionPane.showMessageDialog(null, "please select a row");
            return;
        }
        Doctor receiverDoctor=(Doctor)DoctorsDetailsJtable.getValueAt(selectedRow, 0);
        String message =txtMessage.getText();
        if(message.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "please enter message");
            return;
        }
        
        ReferToOtherDoctorWorkRequest request=new ReferToOtherDoctorWorkRequest();
        request.setMessage(message);
        request.setPatient(patient);
        request.setSender(senderDoctor);
        request.setReceiver(receiverDoctor);
        request.setEncounterList(encounterList);
        request.setReceiverEnterprise(receiverEnterprise);
        request.setSenderEnterprise(senderEnterprise);
        request.setStatus("send to" + "Dr."+ receiverDoctor.getFirstName());
        
        patient.setTemporaryDoctor(receiverDoctor);
        patient.setSecondaryDoctorEnterprise(receiverEnterprise);
        
        senderDoctor.getWorkQueue().getWorkRequestList().add(request);
        receiverDoctor.getWorkQueue().getWorkRequestList().add(request);
        patient.getWorkQueue().getWorkRequestList().add(request);
        JOptionPane.showMessageDialog(null, "request sent to refer doctor");
        btnSendRequest.setVisible(false);
        
    }//GEN-LAST:event_btnSendRequestActionPerformed

    private void btnbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnbackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DoctorsDetailsJtable;
    private javax.swing.JButton btnSendRequest;
    private javax.swing.JButton btnback;
    private javax.swing.JComboBox comboCity;
    private javax.swing.JComboBox comboCountry;
    private javax.swing.JComboBox comboEnterprise;
    private javax.swing.JComboBox comboState;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtMessage;
    // End of variables declaration//GEN-END:variables
}
